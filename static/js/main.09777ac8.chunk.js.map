{"version":3,"sources":["App.js","index.js"],"names":["state","proxy","current","items","cimen","Marbre","Model","props","ref","useRef","snap","useSnapshot","useGLTF","nodes","materials","useFrame","t","clock","getElapsedTime","rotation","z","Math","sin","x","cos","y","position","useState","hovered","set","useEffect","cursor","document","body","style","btoa","dispose","onPointerOver","e","stopPropagation","object","material","name","onPointerOut","intersections","length","onPointerDown","onPointerMissed","material-color","geometry","coulis","plaquette","Picker","display","className","color","onChange","App","shadows","dpr","camera","fov","intensity","angle","penumbra","castShadow","fallback","ContactShadows","Environment","preset","OrbitControls","enableZoom","ReactDOM","render","getElementById"],"mappings":"oQAOMA,EAAQC,gBAAM,CAClBC,QAAS,KACTC,MAAO,CACLC,MAAO,UACPC,OAAQ,aAOZ,SAASC,EAAMC,GACb,IAAMC,EAAMC,mBAENC,GADQD,mBACAE,sBAAYX,IAC1B,EAA6BY,YAAQ,YAA7BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAEfC,aAAS,SAACf,GACR,IAAMgB,EAAIhB,EAAMiB,MAAMC,iBACtBV,EAAIN,QAAQiB,SAASC,GAAK,IAAO,EAAIC,KAAKC,IAAIN,EAAI,MAAQ,GAC1DR,EAAIN,QAAQiB,SAASI,EAAIF,KAAKG,IAAIR,EAAI,GAAK,EAC3CR,EAAIN,QAAQiB,SAASM,EAAIJ,KAAKC,IAAIN,EAAI,GAAK,EAC3CR,EAAIN,QAAQwB,SAASD,GAAK,EAAIJ,KAAKC,IAAIN,EAAI,MAAQ,MAKrD,MAAuBW,mBAAS,MAAhC,mBAAOC,EAAP,KAAgBC,EAAhB,KAQA,OAPAC,qBAAU,WACR,IAAMC,EAAM,yYAAqYrB,EAAKP,MAAMyB,GAAhZ,+MAA+lBA,EAA/lB,0nBAEZI,SAASC,KAAKC,MAAMH,OAApB,yCAA+DI,KAAKP,EAAUG,EADpE,yRACV,cACC,CAACH,IAIF,gDACApB,IAAKA,GACFD,GAFH,IAEU6B,QAAS,KACnBC,cAAe,SAACC,GAAD,OAAQA,EAAEC,kBAAmBV,EAAIS,EAAEE,OAAOC,SAASC,OAClEC,aAAc,SAACL,GAAD,OAAkC,IAA3BA,EAAEM,cAAcC,QAAgBhB,EAAI,OACzDiB,cAAe,SAACR,GAAD,OAAQA,EAAEC,kBAAoBvC,EAAME,QAAUoC,EAAEE,OAAOC,SAASC,MAC/EK,gBAAiB,kBAAO/C,EAAME,QAAU,MANxC,UASE,sBAAM8C,iBAAgBtC,EAAKP,MAAMC,MAAO6C,SAAUpC,EAAMqC,OAAOD,SAAUR,SAAU3B,EAAUV,QAC5F,sBAAM4C,iBAAgBtC,EAAKP,MAAME,OAAQ4C,SAAUpC,EAAMsC,UAAUF,SAAUR,SAAU3B,EAAUT,aAMxG,SAAS+C,IACP,IAAM1C,EAAOC,sBAAYX,GACzB,OACE,sBAAKkC,MAAO,CAAEmB,QAAS3C,EAAKR,QAAU,QAAU,QAAhD,UACA,cAAC,IAAD,CAAgBoD,UAAU,SAASC,MAAO7C,EAAKP,MAAMO,EAAKR,SAAUsD,SAAU,SAACD,GAAD,OAAYvD,EAAMG,MAAMO,EAAKR,SAAWqD,KACtH,6BAAK7C,EAAKR,aAOC,SAASuD,IACtB,OACE,qCACA,cAACL,EAAD,IACA,eAAC,IAAD,CAAQM,SAAO,EAACC,IAAK,CAAC,EAAG,GAAIC,OAAQ,CAAElC,SAAU,CAAC,EAAG,EAAG,IAAKmC,IAAK,IAAlE,UACE,8BAAcC,UAAW,KACzB,2BAAWA,UAAW,GAAKC,MAAO,GAAKC,SAAU,EAAGtC,SAAU,CAAC,GAAI,EAAG,IAAKuC,YAAU,IACrF,eAAC,WAAD,CAAUC,SAAU,KAApB,UAEE,cAAC5D,EAAD,IACA,cAAC6D,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAaC,OAAO,OAAMP,UAAW,QAEvC,cAACQ,EAAA,EAAD,CAAiBC,YAAY,UC/EnCC,IAASC,OAAO,cAAChB,EAAD,IAASzB,SAAS0C,eAAe,W","file":"static/js/main.09777ac8.chunk.js","sourcesContent":["import React, { useRef, Suspense,   useState, useEffect  } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { useGLTF, OrbitControls, ContactShadows, Environment } from '@react-three/drei'\nimport { proxy,  useSnapshot } from 'valtio'\nimport { HexColorPicker } from \"react-colorful\"\n\n\nconst state = proxy({\n  current: null,\n  items: {\n    cimen: \"#ffffff\",\n    Marbre: \"#ffffff\"\n\n  },\n})\n\n\n\nfunction Model(props) {\n  const ref = useRef()\n  const group = useRef()\n  const snap =  useSnapshot(state)\n  const { nodes, materials } = useGLTF('good.glb')\n\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime()\n    ref.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20\n    ref.current.rotation.x = Math.cos(t / 4) / 8\n    ref.current.rotation.y = Math.sin(t / 4) / 8\n    ref.current.position.y = (1 + Math.sin(t / 1.5)) / 10\n  })\n\n\n\n  const [hovered, set] = useState(null)\n  useEffect(() => {\n    const cursor = `<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0)\"><path fill=\"rgba(255, 255, 255, 0.5)\" d=\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\" stroke=\"#000\"/><g filter=\"url(#filter0_d)\"><path d=\"M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z\" fill=\"${snap.items[hovered]}\"/></g><path d=\"M2 2l11 2.947L4.947 13 2 2z\" fill=\"#000\"/><text fill=\"#000\" style=\"white-space:pre\" font-family=\"Inter var, sans-serif\" font-size=\"10\" letter-spacing=\"-.01em\"><tspan x=\"35\" y=\"63\">${hovered}</tspan></text></g><defs><clipPath id=\"clip0\"><path fill=\"#fff\" d=\"M0 0h64v64H0z\"/></clipPath><filter id=\"filter0_d\" x=\"6\" y=\"8\" width=\"47\" height=\"47\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feColorMatrix in=\"SourceAlpha\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"/><feOffset dy=\"2\"/><feGaussianBlur stdDeviation=\"3\"/><feColorMatrix values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\"/><feBlend in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\"/><feBlend in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\"/></filter></defs></svg>`\n    const auto = `<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"rgba(255, 255, 255, 0.5)\" d=\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\" stroke=\"#000\"/><path d=\"M2 2l11 2.947L4.947 13 2 2z\" fill=\"#000\"/></svg>`\n    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(hovered ? cursor : auto)}'), auto`\n  }, [hovered])\n\n  \n  return (\n    <group \n    ref={ref}\n   {...props} dispose={null}\n    onPointerOver={(e) => (e.stopPropagation(), set(e.object.material.name))}\n    onPointerOut={(e) => e.intersections.length === 0 && set(null)}\n    onPointerDown={(e) => (e.stopPropagation(), (state.current = e.object.material.name))}\n    onPointerMissed={() => (state.current = null)}\n    \n    >\n      <mesh material-color={snap.items.cimen} geometry={nodes.coulis.geometry} material={materials.cimen} />\n       <mesh material-color={snap.items.Marbre} geometry={nodes.plaquette.geometry} material={materials.Marbre} /> \n    </group>\n  )\n}\n\n\nfunction Picker() {\n  const snap = useSnapshot(state)\n  return (\n    <div style={{ display: snap.current ? \"block\" : \"none\" }}>\n    <HexColorPicker className=\"picker\" color={snap.items[snap.current]} onChange={(color) => (state.items[snap.current] = color)} />\n    <h1>{snap.current}</h1>\n  </div>\n  )\n}\n\n\n\nexport default function App() {\n  return (\n    <>\n    <Picker />\n    <Canvas shadows dpr={[1, 2]} camera={{ position: [0, 0, 60], fov: 50 }} > \n      <ambientLight intensity={0.1} />\n      <spotLight intensity={0.5} angle={0.3} penumbra={1} position={[30, 0, 50]} castShadow />\n      <Suspense fallback={null}>\n  \n        <Model />\n        <ContactShadows  />\n        <Environment preset=\"city\"intensity={0.3} />\n      </Suspense>\n      <OrbitControls   enableZoom={false} />\n    </Canvas>\n\n</>\n  )\n}\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport './styles.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}